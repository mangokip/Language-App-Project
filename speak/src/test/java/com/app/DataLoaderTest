import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class DataLoaderTest {
    private Users users = Users.getInstance();
    private ArrayList<User> userList = users.getUsers();

    @BeforeEach
    public void setup() {
        userList.clear();
        userList.add(new User("TheTest, PassWord, tester@gmail.com"));
        DataWriter.saveUsers();
    }

    @AfterEach
    public void tearDown() {
        Users.getInstance().getUsers().clear();
        DataWriter.saveUsers();
    }

    @Test
    void testGetUsersSize() {
        userList = DataLoader.getUsers();
        assertEquals(1, userList.size());
    }

    @Test
    void testGetUsersSizeZero() {
        Users.getInstance().getUsers().clear();
        DataWriter.saveUsers();
        assertEquals(0, userList.size());   
    }

    @Test
    void testGetUserPassword() {
        userList = DataLoader.getUsers();
        assertEquals("PassWord", userList.get(0).getPassword());   
    }

    @Test
    public void testLoadWords() {
        // Act: Load words from the JSON file into a language-word map
        Map<String, List<Word>> languageWords = DataLoader.loadWords();

        // Assert: Check the map is not empty and contains expected keys
        assertNotNull(languageWords, "LanguageWords map should not be null.");
        assertTrue(languageWords.size() > 0, "LanguageWords map should not be empty.");
        
        // Verify that a sample language contains words
        List<Word> spanishWords = languageWords.get("Spanish");
        assertNotNull(spanishWords, "Spanish words list should not be null.");
        assertTrue(spanishWords.size() > 0, "Spanish words list should not be empty.");
    }

    @Test
    public void testLoadUsers() {
        // Act: Load users from the JSON file
        ArrayList<User> users = DataLoader.loadUsers();

        // Assert: Verify the number of users and some sample properties
        assertNotNull(users, "Users list should not be null.");
        assertTrue(users.size() > 0, "Users list should not be empty.");

        // Verify the first user's data (assuming you know what data is in users.json)
        User firstUser = users.get(0);
        assertNotNull(firstUser.getUserName(), "Username should not be null.");
        assertNotNull(firstUser.getEmail(), "Email should not be null.");
    }
}